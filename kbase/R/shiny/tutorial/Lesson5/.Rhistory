titlePanel("Hello World!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 5,
max = 50,
value = 30)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
# Histogram of the Old Faithful Geyser Data ----
# with requested number of bins
# This expression that generates a histogram is wrapped in a call
# to renderPlot to indicate that:
#
# 1. It is "reactive" and therefore should be automatically
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$distPlot <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#75AADB", border = "red",
xlab = "Waiting time to next eruption (in mins)",
main = "Histogram of waiting times")
})
}
source('Documents/R/shiny/test-app.R')
source('Documents/R/shiny/test-app.R')
source('Documents/R/shiny/test-app.R')
runApp()
runApp
runApp("App-1")
source('Documents/R/shiny/test-app.R')
runExample("01_hello")
library(shiny)
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Hello World!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 5,
max = 50,
value = 30)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
# Histogram of the Old Faithful Geyser Data ----
# with requested number of bins
# This expression that generates a histogram is wrapped in a call
# to renderPlot to indicate that:
#
# 1. It is "reactive" and therefore should be automatically
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$distPlot <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#75AADB", border = "red",
xlab = "Waiting time to next eruption (in mins)",
main = "Histogram of waiting times")
})
}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
runApp("App-1")
source('test-app.R')
#runExample("01_hello")      # a histogram
#runExample("02_text")       # tables and data frames
#runExample("03_reactivity") # a reactive expression
#runExample("04_mpg")        # global variables
#runExample("05_sliders")    # slider bars
#runExample("06_tabsets")    # tabbed panels
#runExample("07_widgets")    # help text and submit buttons
#runExample("08_html")       # Shiny app built from HTML
#runExample("09_upload")     # file upload wizard
#runExample("10_download")   # file download wizard
runExample("11_timer")      # an automated timer
runApp()
runExample("11_timer")      # an automated timer
runExample("11_timer")      # an automated timer
library(shiny)
# runApp("App-1")
#runExample("01_hello")      # a histogram
#runExample("02_text")       # tables and data frames
#runExample("03_reactivity") # a reactive expression
#runExample("04_mpg")        # global variables
#runExample("05_sliders")    # slider bars
#runExample("06_tabsets")    # tabbed panels
#runExample("07_widgets")    # help text and submit buttons
#runExample("08_html")       # Shiny app built from HTML
#runExample("09_upload")     # file upload wizard
#runExample("10_download")   # file download wizard
runExample("11_timer")      # an automated timer
library(shiny)
runExample("11_timer")      # an automated timer
runExample("10_download")   # file download wizard
#runExample("01_hello")      # a histogram
#runExample("02_text")       # tables and data frames
#runExample("03_reactivity") # a reactive expression
#runExample("04_mpg")        # global variables
#runExample("05_sliders")    # slider bars
#runExample("06_tabsets")    # tabbed panels
#runExample("07_widgets")    # help text and submit buttons
runExample("08_html")       # Shiny app built from HTML
#runExample("01_hello")      # a histogram
#runExample("02_text")       # tables and data frames
#runExample("03_reactivity") # a reactive expression
#runExample("04_mpg")        # global variables
#runExample("05_sliders")    # slider bars
runExample("06_tabsets")    # tabbed panels
#runExample("07_widgets")    # help text and submit buttons
#runExample("08_html")       # Shiny app built from HTML
#runExample("01_hello")      # a histogram
#runExample("02_text")       # tables and data frames
#runExample("03_reactivity") # a reactive expression
#runExample("04_mpg")        # global variables
runExample("05_sliders")    # slider bars
#runExample("06_tabsets")    # tabbed panels
#runExample("07_widgets")    # help text and submit buttons
#runExample("08_html")       # Shiny app built from HTML
#runExample("01_hello")      # a histogram
#runExample("02_text")       # tables and data frames
#runExample("03_reactivity") # a reactive expression
runExample("04_mpg")        # global variables
#runExample("05_sliders")    # slider bars
#runExample("06_tabsets")    # tabbed panels
#runExample("07_widgets")    # help text and submit buttons
#runExample("08_html")       # Shiny app built from HTML
#runExample("01_hello")      # a histogram
#runExample("02_text")       # tables and data frames
runExample("03_reactivity") # a reactive expression
#runExample("04_mpg")        # global variables
#runExample("05_sliders")    # slider bars
#runExample("06_tabsets")    # tabbed panels
#runExample("07_widgets")    # help text and submit buttons
#runExample("08_html")       # Shiny app built from HTML
#runExample("01_hello")      # a histogram
#runExample("02_text")       # tables and data frames
runExample("03_reactivity") # a reactive expression
#runExample("04_mpg")        # global variables
#runExample("05_sliders")    # slider bars
#runExample("06_tabsets")    # tabbed panels
#runExample("07_widgets")    # help text and submit buttons
#runExample("08_html")       # Shiny app built from HTML
#runExample("01_hello")      # a histogram
runExample("02_text")       # tables and data frames
#runExample("03_reactivity") # a reactive expression
#runExample("04_mpg")        # global variables
#runExample("05_sliders")    # slider bars
#runExample("06_tabsets")    # tabbed panels
#runExample("07_widgets")    # help text and submit buttons
#runExample("08_html")       # Shiny app built from HTML
#runExample("01_hello")      # a histogram
#runExample("02_text")       # tables and data frames
#runExample("03_reactivity") # a reactive expression
#runExample("04_mpg")        # global variables
#runExample("05_sliders")    # slider bars
#runExample("06_tabsets")    # tabbed panels
#runExample("07_widgets")    # help text and submit buttons
#runExample("08_html")       # Shiny app built from HTML
#runExample("01_hello")      # a histogram
#runExample("02_text")       # tables and data frames
#runExample("03_reactivity") # a reactive expression
#runExample("04_mpg")        # global variables
#runExample("05_sliders")    # slider bars
#runExample("06_tabsets")    # tabbed panels
#runExample("07_widgets")    # help text and submit buttons
#runExample("08_html")       # Shiny app built from HTML
#runExample("01_hello")      # a histogram
#runExample("02_text")       # tables and data frames
#runExample("03_reactivity") # a reactive expression
#runExample("04_mpg")        # global variables
#runExample("05_sliders")    # slider bars
#runExample("06_tabsets")    # tabbed panels
#runExample("07_widgets")    # help text and submit buttons
#runExample("08_html")       # Shiny app built from HTML
#runExample("01_hello")      # a histogram
#runExample("02_text")       # tables and data frames
#runExample("03_reactivity") # a reactive expression
#runExample("04_mpg")        # global variables
#runExample("05_sliders")    # slider bars
#runExample("06_tabsets")    # tabbed panels
#runExample("07_widgets")    # help text and submit buttons
#runExample("08_html")       # Shiny app built from HTML
#runExample("01_hello")      # a histogram
#runExample("02_text")       # tables and data frames
#runExample("03_reactivity") # a reactive expression
#runExample("04_mpg")        # global variables
runExample("05_sliders")    # slider bars
#runExample("06_tabsets")    # tabbed panels
#runExample("07_widgets")    # help text and submit buttons
#runExample("08_html")       # Shiny app built from HTML
#runExample("01_hello")      # a histogram
#runExample("02_text")       # tables and data frames
#runExample("03_reactivity") # a reactive expression
#runExample("04_mpg")        # global variables
#runExample("05_sliders")    # slider bars
runExample("06_tabsets")    # tabbed panels
#runExample("07_widgets")    # help text and submit buttons
#runExample("08_html")       # Shiny app built from HTML
install.packages(c("ggmap", "leaflet", "leaflet.extras", "lubridate", "maps", "mongolite", "sqldf"))
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Hello World!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 5,
max = 50,
value = 30)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
# Histogram of the Old Faithful Geyser Data ----
# with requested number of bins
# This expression that generates a histogram is wrapped in a call
# to renderPlot to indicate that:
#
# 1. It is "reactive" and therefore should be automatically
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$distPlot <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#75AADB", border = "red",
xlab = "Waiting time to next eruption (in mins)",
main = "Histogram of waiting times")
})
}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
runApp('App-1')
runApp('Lesson2')
runApp('Lesson2')
runApp('Lesson3')
ui <- fluidPage(
titlePanel("censusVis"),
sidebarLayout(
sidebarPanel(
helpText("Create demographic maps with
information from the 2010 US Census."),
selectInput("var",
label = "Choose a variable to display",
choices = list("Percent White",
"Percent Black",
"Percent Hispanic",
"Percent Asian"),
selected = "Percent White"),
sliderInput("range",
label = "Range of interest:",
min = 0, max = 100, value = c(0, 100))
),
mainPanel()
)
# Run the app ----
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
titlePanel("censusVis"),
sidebarLayout(
sidebarPanel(
helpText("Create demographic maps with
information from the 2010 US Census."),
selectInput("var",
label = "Choose a variable to display",
choices = list("Percent White",
"Percent Black",
"Percent Hispanic",
"Percent Asian"),
selected = "Percent White"),
sliderInput("range",
label = "Range of interest:",
min = 0, max = 100, value = c(0, 100))
),
mainPanel()
)
)
# Define server logic ----
server <- function(input, output) {
}
# Run the app ----
shinyApp(ui = ui, server = server)
runApp('Lesson3-1')
ui <- fluidPage(
titlePanel("censusVis"),
sidebarLayout(
sidebarPanel(
helpText("Create demographic maps with
information from the 2010 US Census."),
selectInput("var",
label = "Choose a variable to display",
choices = c("Percent White",
"Percent Black",
"Percent Hispanic",
"Percent Asian"),
selected = "Percent White"),
sliderInput("range",
label = "Range of interest:",
min = 0, max = 100, value = c(0, 100))
),
mainPanel(
textOutput("selected_var")
)
)
runApp("Lesson4", display.mode = "showcase")
server <- function(input, output) {
output$selected_var <- renderText({
paste("You have selected", input$var)
})
}
shinyApp(ui, server)
runApp('Lesson4')
counties <- readRDS("../data/counties.rds")
head(counties)
counties <- readRDS("../data/counties.rds")
head(counties)
counties <- readRDS("../data/counties.rds")
head(counties)
setwd("/Users/ricardoalmeida/Documents/R/shiny")
counties <- readRDS("../data/counties.rds")
head(counties)
setwd("/Users/ricardoalmeida/Documents/R/shiny/Lesson5")
counties <- readRDS("../data/counties.rds")
head(counties)
install.packages(c("maps", "mapproj"))
counties <- readRDS("../data/counties.rds")
head(counties)
setwd("/Users/ricardoalmeida/Documents/R/shiny/Lesson5")
library(maps)
library(mapproj)
source("./helpers.R")
counties <- readRDS("../data/counties.rds")
percent_map(counties$white, "darkgreen", "% White")
setwd("/Users/ricardoalmeida/Documents/R/shiny/Lesson5")
library(shiny)
library(maps)
library(mapproj)
source("./helpers.R")
counties <- readRDS("../data/counties.rds")
#percent_map(counties$white, "darkgreen", "% White")
# User interface ----
ui <- fluidPage(
titlePanel("censusVis"),
sidebarLayout(
sidebarPanel(
helpText("Create demographic maps with
information from the 2010 US Census."),
selectInput("var",
label = "Choose a variable to display",
choices = c("Percent White", "Percent Black",
"Percent Hispanic", "Percent Asian"),
selected = "Percent White"),
sliderInput("range",
label = "Range of interest:",
min = 0, max = 100, value = c(0, 100))
),
mainPanel(plotOutput("map"))
)
)
# Server logic ----
server <- function(input, output) {
output$map <- renderPlot({
data <- switch(input$var,
"Percent White" = counties$white,
"Percent Black" = counties$black,
"Percent Hispanic" = counties$hispanic,
"Percent Asian" = counties$asian)
color <- switch(input$var,
"Percent White" = "darkgreen",
"Percent Black" = "black",
"Percent Hispanic" = "darkorange",
"Percent Asian" = "darkviolet")
legend <- switch(input$var,
"Percent White" = "% White",
"Percent Black" = "% Black",
"Percent Hispanic" = "% Hispanic",
"Percent Asian" = "% Asian")
percent_map(data, color, legend, input$range[1], input$range[2])
})
}
# Run app ----
shinyApp(ui, server)
install.packages("readtext")
install.packages("Rcrawler")
library(Rcrawler)
Rcrawler(Website = "https://officebusiness.mosyle.com/logs/", no_cores = 4, no_conn = 4)
View(INDEX)
install_browser()
br<-LoginSession(Browser = br, LoginURL = 'https://officebusiness.mosyle.com/logs/',
LoginCredentials = c('dev','Dev1401'),
cssLoginFields =c('#login', '#password'),
XpathLoginButton ="//*[@type=\'submit\']" )
Rcrawler(Website ="https://officebusiness.mosyle.com/logs/",no_cores = 1,no_conn = 1, LoggedSession = br, RequestsDelay = 3)
br<-LoginSession(Browser = br, LoginURL = 'https://officebusiness.mosyle.com/logs',
LoginCredentials = c('dev','Dev1401'),
cssLoginFields =c('#login', '#password'),
XpathLoginButton ="//*[@type=\'submit\']" )
# library(readtext)
library(Rcrawler)
install_browser()
br<-LoginSession(Browser = br, LoginURL = 'https://officebusiness.mosyle.com/logs',
LoginCredentials = c('dev','Dev1401'),
cssLoginFields =c('#login', '#password'),
XpathLoginButton ="//*[@type=\'submit\']" )
# Get the data directory from readtext
# DATA_DIR <- system.file("/Users/ricardoalmeida/Documents/R/readfile", package = "readtext")
# https://officebusiness.mosyle.com/logs/
# https://officebusiness.mosyle.com/logs/2019-11-07/php-error.html
# https://officebusiness.mosyle.com/logs/
# Rcrawler(Website = "https://officebusiness.mosyle.com/logs/", no_cores = 4, no_conn = 4)
Rcrawler(Website ="https://officebusiness.mosyle.com/logs/",no_cores = 1,no_conn = 1, LoggedSession = br, RequestsDelay = 3)
# br$session$
# library(readtext)
library(Rcrawler)
install_browser()
br<-run_browser()
"
br<-LoginSession(Browser = br, LoginURL = 'https://officebusiness.mosyle.com/logs',
LoginCredentials = c('dev','Dev1401'),
cssLoginFields =c('#username', '#password'),
cssLoginButton='#wp-submit' )
"
br<-LoginSession(Browser = br, LoginURL = 'https://officebusiness.mosyle.com/logs',
LoginCredentials = c('dev','Dev1401'),
cssLoginFields =c('#username', '#password'),
XpathLoginButton ="//*[@type=\'submit\']" )
# Get the data directory from readtext
# DATA_DIR <- system.file("/Users/ricardoalmeida/Documents/R/readfile", package = "readtext")
# https://officebusiness.mosyle.com/logs/
# https://officebusiness.mosyle.com/logs/2019-11-07/php-error.html
# https://officebusiness.mosyle.com/logs/
# Rcrawler(Website = "https://officebusiness.mosyle.com/logs/", no_cores = 4, no_conn = 4)
Rcrawler(Website ="https://officebusiness.mosyle.com/logs",
no_cores = 1,
no_conn = 1,
LoggedSession = br,
RequestsDelay = 3)
# br$session$
View(br)
View(INDEX)
# library(readtext)
library(Rcrawler)
install_browser()
br<-run_browser()
"
br<-LoginSession(Browser = br, LoginURL = 'https://officebusiness.mosyle.com/logs',
LoginCredentials = c('dev','Dev1401'),
cssLoginFields =c('#username', '#password'),
cssLoginButton='#wp-submit' )
"
br<-LoginSession(Browser = br, LoginURL = 'https://officebusiness.mosyle.com/logs',
LoginCredentials = c('dev','Dev1401'),
cssLoginFields =c('#login', '#password'),
XpathLoginButton ="//*[@type=\'submit\']" )
# Get the data directory from readtext
# DATA_DIR <- system.file("/Users/ricardoalmeida/Documents/R/readfile", package = "readtext")
# https://officebusiness.mosyle.com/logs/
# https://officebusiness.mosyle.com/logs/2019-11-07/php-error.html
# https://officebusiness.mosyle.com/logs/
# Rcrawler(Website = "https://officebusiness.mosyle.com/logs/", no_cores = 4, no_conn = 4)
Rcrawler(Website ="https://officebusiness.mosyle.com/logs",
no_cores = 1,
no_conn = 1,
LoggedSession = br,
RequestsDelay = 3)
# br$session$
library(Rcrawler)
Rcrawler(Website = "http://localhost/web/utils/tmp/logs/", no_cores = 4, no_conn = 4)
library(Rcrawler)
Rcrawler(Website = "http://localhost/web/utils/tmp/logs/2019-11-07/", no_cores = 4, no_conn = 4)
library(Rcrawler)
Rcrawler(Website = "http://localhost/web/utils/tmp/logs/2019-11-07/", no_cores = 1, no_conn = 1)
View(INDEX)
View(br)
View(INDEX)
View(INDEX)
